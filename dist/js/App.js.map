{"version":3,"sources":["../../js/App.js"],"names":["App","props","state","filters","getEffectiveFilters","sorting","effectiveFilters","minPriority","isViewed","userFilters","localStorage","JSON","parse","Object","assign","change","newFilters","setState","stringify","setFilter","bind","setSorting","React","Component"],"mappings":";;;;;;;;;;AAAA;IACMA,G;;;AAEJ,eAAYC,KAAZ,EAAmB;AAAA;;AAAA,0GAEXA,KAFW;;AAIjB,UAAKC,KAAL,GAAa;AACXC,eAAS,MAAKC,mBAAL,EADE;AAEXC,eAAS;AAFE,KAAb;AAJiB;AAQlB;;;;0CAEqB;;AAEpB,UAAMC,mBAAmB;AACvBC,qBAAa,EADU,EACN;AACjBC,kBAAU;AAFa,OAAzB;;AAKA,UAAMC,cAAcC,aAAaP,OAAb,GAAuBQ,KAAKC,KAAL,CAAWF,aAAaP,OAAxB,CAAvB,GAA0D,IAA9E;;AAEAU,aAAOC,MAAP,CAAcR,gBAAd,EAAgCG,WAAhC;;AAEA;;;;;;;;;;;;;AAcA,aAAOH,gBAAP;AACD;;;8BAESS,M,EAAQ;;AAEhB,UAAMC,aAAaH,OAAOC,MAAP,CAAc,EAAd,EAAkB,KAAKZ,KAAL,CAAWC,OAA7B,EAAsCY,MAAtC,CAAnB;AACA,WAAKE,QAAL,CAAc,EAAEd,SAASa,UAAX,EAAd;AACAN,mBAAaP,OAAb,GAAuBQ,KAAKO,SAAL,CAAeF,UAAf,CAAvB;AACD;;;+BAEUD,M,EAAQ;;AAEjB,WAAKE,QAAL,CAAc,EAAEZ,SAASU,MAAX,EAAd;AACAL,mBAAaL,OAAb,GAAuBU,MAAvB;AACD;;;6BAEQ;AACP,aACE;AAAA;AAAA,UAAK,WAAU,WAAf;AACE,4BAAC,OAAD,IAAS,SAAS,KAAKb,KAAL,CAAWC,OAA7B;AACS,mBAAS,KAAKD,KAAL,CAAWG,OAD7B;AAES,qBAAW,KAAKc,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAFpB;AAGS,sBAAY,KAAKC,UAAL,CAAgBD,IAAhB,CAAqB,IAArB,CAHrB,GADF;AAKE,4BAAC,SAAD,IAAW,MAAM,KAAKlB,KAAL,CAAWC,OAA5B,EAAqC,SAAS,KAAKD,KAAL,CAAWG,OAAzD;AALF,OADF;AASD;;;;EA/DeiB,MAAMC,S","file":"App.js","sourcesContent":["// EventableComponent provides event handling methods such as @listenTo and @stopListening\nclass App extends React.Component {\n\n  constructor(props) {\n\n    super(props);\n\n    this.state = {\n      filters: this.getEffectiveFilters(),\n      sorting: \"contentLengthInCharacters\"\n    };\n  }\n\n  getEffectiveFilters() {\n\n    const effectiveFilters = {\n      minPriority: 15, // normal\n      isViewed: false\n    };\n\n    const userFilters = localStorage.filters ? JSON.parse(localStorage.filters) : null;\n\n    Object.assign(effectiveFilters, userFilters);\n\n    /*let daysToDisplay;\n    if (userFilters) {\n      const duration = moment.duration(moment(userFilters.maxCreatedAt).diff(moment(userFilters.minCreatedAt)));\n      daysToDisplay = duration.asDays() + 1;\n    } else {\n      daysToDisplay = 2;\n    }\n\n    console.log('daysToDisplay is ' + daysToDisplay);\n    const today = moment().startOf(\"day\");\n    //effectiveFilters.maxCreatedAt = today.format('YYYY-MM-DD'); // today\n    effectiveFilters.minCreatedAt = today.subtract(daysToDisplay - 1, 'days').toDate().toISOString(); // x days ago\n*/\n\n    return effectiveFilters;\n  }\n\n  setFilter(change) {\n\n    const newFilters = Object.assign({}, this.state.filters, change);\n    this.setState({ filters: newFilters });\n    localStorage.filters = JSON.stringify(newFilters);\n  }\n\n  setSorting(change) {\n\n    this.setState({ sorting: change });\n    localStorage.sorting = change;\n  }\n\n  render() {\n    return (\n      <div className='container'>\n        <Options filters={this.state.filters}\n                 sorting={this.state.sorting}\n                 setFilter={this.setFilter.bind(this)}\n                 setSorting={this.setSorting.bind(this)} />\n        <Bookmarks data={this.state.filters} sorting={this.state.sorting} />\n      </div>\n    );\n  }\n}\n"]}